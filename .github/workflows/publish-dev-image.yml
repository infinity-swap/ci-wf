name: Build image based on ic
on:
  workflow_call:
    inputs:
      # Github artifact that was produced by previous job.
      # Expecting not to have any nested folders inside artifact
      input-artifact:
        type: string
        required: true
      # Optional 2nd artifact to use
      input-artifact-opt:
        type: string
        required: false
      dockerfile:
        type: string
        required: true
      push-image:
        type: boolean
        required: true
      output-image-name:
        type: string
        required: true
      output-image-tag-latest:
        type: boolean
        required: false
      gcp_registry_domain:
        type: string
        required: false
      gcp_registry_image:
        type: string
        required: false

    secrets:
      gh_token:
        required: true
      gh_login:
        required: true
      gcp_registry_token:
        required: false

jobs:
  publish-dev-image:
    runs-on: ubuntu-latest
    env:
      GCP_REG_TOKEN: ${{ secrets.gcp_registry_token }}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Login to Github Registry
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ secrets.gh_login }}
          password: ${{ secrets.gh_token }}

      - name: Login to GCP Registry
        if: ${{ env.GCP_REG_TOKEN && inputs.gcp_registry_domain }}
        uses: docker/login-action@v1
        with:
          registry: ${{ inputs.gcp_registry_domain }}
          username: _json_key
          password: ${{ secrets.gcp_registry_token }}

      - name: Checkout template repo
        uses: actions/checkout@v3

      - name: "Downloading artifact: ${{ inputs.input-artifact }}"
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.input-artifact }}
          path: ./.artifact
      
      - name: "Optional artifact: ${{ inputs.input-artifact-opt }}"
        uses: actions/download-artifact@v3
        if: ${{ inputs.input-artifact-opt }}
        with:
          name: ${{ inputs.input-artifact-opt }}
          path: ./.artifact

      - name: List files from artifact
        run: ls -laR ./.artifact

      # - name: "Fail if no latest build or no tag is provided"
      #   if: ${{ inputs.push-image && github.ref_type != 'tag'  && ! inputs.output-image-tag-latest }}
      #   run: exit 42

      - name: "Adding \"latest\" tag"
        if: ${{ inputs.output-image-tag-latest }}
        run: echo "IMAGE_TAG_LATEST=ghcr.io/${{ github.repository_owner }}/${{ inputs.output-image-name }}:latest" >> $GITHUB_ENV

      - name: "Adding image tag"
        if: ${{ github.ref_type == 'tag' }}
        run: |
          echo "IMAGE_TAG=ghcr.io/${{ github.repository_owner }}/${{ inputs.output-image-name }}:${{ github.ref_name }}" >> $GITHUB_ENV
          echo "TAG ADDED: ${{ github.ref_name }}"

      - name: "Adding image tag for GCP"
        if: ${{ env.GCP_REG_TOKEN }}
        # if: ${{ github.ref_type == 'tag' && env.GCP_REG_TOKEN }}
        run: |
          # echo "IMAGE_TAG_GCP=${{ inputs.gcp_registry_domain }}/${{ inputs.gcp_registry_image }}:${{ github.ref_name }}" >> $GITHUB_ENV
          echo "IMAGE_TAG_GCP_LATEST=${{ inputs.gcp_registry_domain }}/${{ inputs.gcp_registry_image }}:latest" >> $GITHUB_ENV
          echo "TAG ADDED: ${{ github.ref_name }}"

      - name: "Building image. Will publish: ${{ inputs.push-image }}"
        uses: docker/build-push-action@v2
        with:
          push: ${{ inputs.push-image }}
          context: .
          file: ${{ inputs.dockerfile }}
          tags: |
            ${{ env.IMAGE_TAG_GCP }}
            ${{ env.IMAGE_TAG_GCP_LATEST }}
          # tags: |
          #   ${{ env.IMAGE_TAG }}
          #   ${{ env.IMAGE_TAG_LATEST }}
          #   ${{ env.IMAGE_TAG_GCP }}
          #   ${{ env.IMAGE_TAG_GCP_LATEST }}
            
